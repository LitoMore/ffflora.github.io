<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Flora&#39;s</title>
    <link>https://ffflora.github.io/tags/notes/</link>
    <description>Recent content in notes on Flora&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Dec 2019 23:08:11 -0800</lastBuildDate>
    
	<atom:link href="https://ffflora.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask(1): Introduction and Setup the Environment</title>
      <link>https://ffflora.github.io/posts/flask1/</link>
      <pubDate>Mon, 02 Dec 2019 23:08:11 -0800</pubDate>
      
      <guid>https://ffflora.github.io/posts/flask1/</guid>
      <description>How to Run Flask by Command After installing/updating the flask package with $conda$, one could use the following command to run the scripts:
$ flask run # This command runs the app.py or wsgi.py under the current dir automatically. And user could find the server running on $http://localhost:5000$, the port by default is 5000.
If you are going to run the scripts other than the two filenames mentioned above, you need to specify the environment variable FLASK_APP by:</description>
    </item>
    
    <item>
      <title>Notes on Recommendation System</title>
      <link>https://ffflora.github.io/posts/recommendation-sys/</link>
      <pubDate>Wed, 20 Nov 2019 00:09:34 -0800</pubDate>
      
      <guid>https://ffflora.github.io/posts/recommendation-sys/</guid>
      <description>What is a Recommendation System? Recommendation system helps people to find things, when the process of finding the information you need might be a little bit challenging, since there&amp;rsquo;s too many choices.
There are two types of recommendation engine:
 most popular (Non personalized: normally top-n algorithm) by features among all users -&amp;gt; this needs to classify the users into various segments. (personalized)  Techniques Non-personalized:  Popularity Frequency count Mean Rating Association Rule Mining  Apriori algorithm: beers and diapers   Pros: no need to analyze the personalized data</description>
    </item>
    
    <item>
      <title>How to be a Kaggle Master?</title>
      <link>https://ffflora.github.io/posts/how-to-be-a-kaggle-master/</link>
      <pubDate>Thu, 05 Sep 2019 13:27:11 -0700</pubDate>
      
      <guid>https://ffflora.github.io/posts/how-to-be-a-kaggle-master/</guid>
      <description>How to be a Kaggle Master Kaggle Combo x3:
Feature Engineering, Model Tuning, Model Ensemble Data Preprocessing: Missing values imputation:  Numeric Features  Impute with mean for normal distributed feature Impute with median for skewed distribution (reduce the impacts of outliers)  Categorical Features  Majority Imputation  Supervised Learning Imputation  Regression/Classification  XGBoost/LightGBM:  Missing values are gracefully treated by considering missing values as candidate for tree splitting point.</description>
    </item>
    
  </channel>
</rss>